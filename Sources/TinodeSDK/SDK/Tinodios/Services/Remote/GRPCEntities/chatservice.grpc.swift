//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: chat-service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Grpc_ChatServiceClient`, then call methods of this protocol to make API calls.
public protocol Grpc_ChatServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Grpc_ChatServiceClientInterceptorFactoryProtocol? { get }

  func register(
    _ request: Grpc_RegisterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpc_RegisterRequest, Grpc_RegisterResponse>

  func getParticipants(
    _ request: Grpc_GetParticipantsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpc_GetParticipantsRequest, Grpc_GetParticipantsResponse>

  func createRoom(
    _ request: Grpc_CreateRoomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpc_CreateRoomRequest, Grpc_CreateRoomResponse>

  func saveDeviceToken(
    _ request: Grpc_SaveDeviceTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpc_SaveDeviceTokenRequest, Grpc_SaveDeviceTokenResponse>

  func sendMessage(
    _ request: Grpc_SendMessageRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpc_SendMessageRequest, Grpc_SendMessageResponse>

  func generateToken(
    _ request: Grpc_GenerateTokenRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpc_GenerateTokenRequest, Grpc_GenerateTokenResponse>
}

extension Grpc_ChatServiceClientProtocol {
  public var serviceName: String {
    return "grpc.ChatService"
  }

  /// Unary call to Register
  ///
  /// - Parameters:
  ///   - request: Request to send to Register.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func register(
    _ request: Grpc_RegisterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpc_RegisterRequest, Grpc_RegisterResponse> {
    return self.makeUnaryCall(
      path: "/grpc.ChatService/Register",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterceptors() ?? []
    )
  }

  /// Unary call to GetParticipants
  ///
  /// - Parameters:
  ///   - request: Request to send to GetParticipants.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getParticipants(
    _ request: Grpc_GetParticipantsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpc_GetParticipantsRequest, Grpc_GetParticipantsResponse> {
    return self.makeUnaryCall(
      path: "/grpc.ChatService/GetParticipants",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetParticipantsInterceptors() ?? []
    )
  }

  /// Unary call to CreateRoom
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRoom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createRoom(
    _ request: Grpc_CreateRoomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpc_CreateRoomRequest, Grpc_CreateRoomResponse> {
    return self.makeUnaryCall(
      path: "/grpc.ChatService/CreateRoom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRoomInterceptors() ?? []
    )
  }

  /// Unary call to SaveDeviceToken
  ///
  /// - Parameters:
  ///   - request: Request to send to SaveDeviceToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func saveDeviceToken(
    _ request: Grpc_SaveDeviceTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpc_SaveDeviceTokenRequest, Grpc_SaveDeviceTokenResponse> {
    return self.makeUnaryCall(
      path: "/grpc.ChatService/SaveDeviceToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSaveDeviceTokenInterceptors() ?? []
    )
  }

  /// Unary call to SendMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendMessage(
    _ request: Grpc_SendMessageRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpc_SendMessageRequest, Grpc_SendMessageResponse> {
    return self.makeUnaryCall(
      path: "/grpc.ChatService/SendMessage",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendMessageInterceptors() ?? []
    )
  }

  /// Unary call to GenerateToken
  ///
  /// - Parameters:
  ///   - request: Request to send to GenerateToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func generateToken(
    _ request: Grpc_GenerateTokenRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpc_GenerateTokenRequest, Grpc_GenerateTokenResponse> {
    return self.makeUnaryCall(
      path: "/grpc.ChatService/GenerateToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGenerateTokenInterceptors() ?? []
    )
  }
}

public protocol Grpc_ChatServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'register'.
  func makeRegisterInterceptors() -> [ClientInterceptor<Grpc_RegisterRequest, Grpc_RegisterResponse>]

  /// - Returns: Interceptors to use when invoking 'getParticipants'.
  func makeGetParticipantsInterceptors() -> [ClientInterceptor<Grpc_GetParticipantsRequest, Grpc_GetParticipantsResponse>]

  /// - Returns: Interceptors to use when invoking 'createRoom'.
  func makeCreateRoomInterceptors() -> [ClientInterceptor<Grpc_CreateRoomRequest, Grpc_CreateRoomResponse>]

  /// - Returns: Interceptors to use when invoking 'saveDeviceToken'.
  func makeSaveDeviceTokenInterceptors() -> [ClientInterceptor<Grpc_SaveDeviceTokenRequest, Grpc_SaveDeviceTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'sendMessage'.
  func makeSendMessageInterceptors() -> [ClientInterceptor<Grpc_SendMessageRequest, Grpc_SendMessageResponse>]

  /// - Returns: Interceptors to use when invoking 'generateToken'.
  func makeGenerateTokenInterceptors() -> [ClientInterceptor<Grpc_GenerateTokenRequest, Grpc_GenerateTokenResponse>]
}

public final class Grpc_ChatServiceClient: Grpc_ChatServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Grpc_ChatServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the grpc.ChatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Grpc_ChatServiceProvider: CallHandlerProvider {
  var interceptors: Grpc_ChatServiceServerInterceptorFactoryProtocol? { get }

  func register(request: Grpc_RegisterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_RegisterResponse>

  func getParticipants(request: Grpc_GetParticipantsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_GetParticipantsResponse>

  func createRoom(request: Grpc_CreateRoomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_CreateRoomResponse>

  func saveDeviceToken(request: Grpc_SaveDeviceTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_SaveDeviceTokenResponse>

  func sendMessage(request: Grpc_SendMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_SendMessageResponse>

  func generateToken(request: Grpc_GenerateTokenRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_GenerateTokenResponse>
}

extension Grpc_ChatServiceProvider {
  public var serviceName: Substring { return "grpc.ChatService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Register":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpc_RegisterRequest>(),
        responseSerializer: ProtobufSerializer<Grpc_RegisterResponse>(),
        interceptors: self.interceptors?.makeRegisterInterceptors() ?? [],
        userFunction: self.register(request:context:)
      )

    case "GetParticipants":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpc_GetParticipantsRequest>(),
        responseSerializer: ProtobufSerializer<Grpc_GetParticipantsResponse>(),
        interceptors: self.interceptors?.makeGetParticipantsInterceptors() ?? [],
        userFunction: self.getParticipants(request:context:)
      )

    case "CreateRoom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpc_CreateRoomRequest>(),
        responseSerializer: ProtobufSerializer<Grpc_CreateRoomResponse>(),
        interceptors: self.interceptors?.makeCreateRoomInterceptors() ?? [],
        userFunction: self.createRoom(request:context:)
      )

    case "SaveDeviceToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpc_SaveDeviceTokenRequest>(),
        responseSerializer: ProtobufSerializer<Grpc_SaveDeviceTokenResponse>(),
        interceptors: self.interceptors?.makeSaveDeviceTokenInterceptors() ?? [],
        userFunction: self.saveDeviceToken(request:context:)
      )

    case "SendMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpc_SendMessageRequest>(),
        responseSerializer: ProtobufSerializer<Grpc_SendMessageResponse>(),
        interceptors: self.interceptors?.makeSendMessageInterceptors() ?? [],
        userFunction: self.sendMessage(request:context:)
      )

    case "GenerateToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpc_GenerateTokenRequest>(),
        responseSerializer: ProtobufSerializer<Grpc_GenerateTokenResponse>(),
        interceptors: self.interceptors?.makeGenerateTokenInterceptors() ?? [],
        userFunction: self.generateToken(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol Grpc_ChatServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'register'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterInterceptors() -> [ServerInterceptor<Grpc_RegisterRequest, Grpc_RegisterResponse>]

  /// - Returns: Interceptors to use when handling 'getParticipants'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetParticipantsInterceptors() -> [ServerInterceptor<Grpc_GetParticipantsRequest, Grpc_GetParticipantsResponse>]

  /// - Returns: Interceptors to use when handling 'createRoom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateRoomInterceptors() -> [ServerInterceptor<Grpc_CreateRoomRequest, Grpc_CreateRoomResponse>]

  /// - Returns: Interceptors to use when handling 'saveDeviceToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSaveDeviceTokenInterceptors() -> [ServerInterceptor<Grpc_SaveDeviceTokenRequest, Grpc_SaveDeviceTokenResponse>]

  /// - Returns: Interceptors to use when handling 'sendMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendMessageInterceptors() -> [ServerInterceptor<Grpc_SendMessageRequest, Grpc_SendMessageResponse>]

  /// - Returns: Interceptors to use when handling 'generateToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGenerateTokenInterceptors() -> [ServerInterceptor<Grpc_GenerateTokenRequest, Grpc_GenerateTokenResponse>]
}
